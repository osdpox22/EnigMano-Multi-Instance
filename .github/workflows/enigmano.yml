name: "‚ö° EnigMano Instance Deployment"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Instance number to deploy (e.g., 1, 2, 3...)"
        required: true
        default: "1"

jobs:
  deploy-enigmano:
    name: "üöÄ Deploy EnigMano Instance ${{ github.event.inputs.INSTANCE }}"
    runs-on: windows-latest

    env:
      INSTANCE_ID: ${{ github.event.inputs.INSTANCE }}
      SECRET_SHAHZAIB: ${{ secrets.SECRET_SHAHZAIB }}
      NGROK_SHAHZAIB: ${{ secrets.NGROK_SHAHZAIB }}
      REPO: ${{ github.repository }}
      WORKFLOW_FILE: "enigmano.yml"
      DEPLOYMENT_ID: ${{ github.run_id }}
      # Your Bot package (Dropbox direct link)
      BOT_ZIP_URL: "https://www.dropbox.com/scl/fi/gmvwihaldwpl0kgswvxdo/bot.zip?rlkey=42hs0lk9kjh1a6g57zkwfocpz&st=i1ld0nyk&dl=1"

    steps:
      - name: üìå Deployment Parameters
        shell: pwsh
        run: |
          $prevInstance = [int]$env:INSTANCE_ID - 1
          Write-Host "==============================================="
          Write-Host "üîπ EnigMano Instance     : $env:INSTANCE_ID"
          Write-Host "üî¢ Previous Instance     : $prevInstance"
          Write-Host "üì¶ GitHub Repository     : $env:REPO"
          Write-Host "üîÅ Deployment Workflow   : $env:WORKFLOW_FILE"
          Write-Host "üÜî Deployment ID         : $env:DEPLOYMENT_ID"
          Write-Host "==============================================="

      - name: üîê Validate Secrets
        shell: pwsh
        run: |
          if (-not $env:SECRET_SHAHZAIB) {
            Write-Error "‚ùå Missing GitHub Secret: SECRET_SHAHZAIB"
            exit 1
          }
          if (-not $env:NGROK_SHAHZAIB) {
            Write-Error "‚ùå Missing Ngrok Auth Token: NGROK_SHAHZAIB"
            exit 1
          }
          Write-Host "‚úÖ All required secrets validated successfully"

      - name: üì• Download EnigMano-instance.ps1
        shell: pwsh
        run: |
          $url = "https://gitlab.com/Shahzaib-YT/enigmano-multi-instance/-/raw/main/EnigMano-instance.ps1"
          Write-Host "üåê Downloading EnigMano-instance.ps1..."
          Invoke-WebRequest -Uri $url -OutFile "EnigMano-instance.ps1" -UseBasicParsing
          if (!(Test-Path "./EnigMano-instance.ps1")) {
            Write-Error "‚ùå Failed to download EnigMano-instance.ps1"
            exit 1
          }
          Write-Host "‚úÖ EnigMano-instance.ps1 downloaded successfully"

      - name: ‚öîÔ∏è Execute EnigMano Instance Script
        shell: pwsh
        run: |
          Write-Host "üö¶ Initiating EnigMano-instance.ps1"
          powershell.exe -ExecutionPolicy Bypass -File ".\EnigMano-instance.ps1"

      # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      # NEW: Auto-prepare and launch your 3 Bots
      # - Downloads your Dropbox Bot.zip
      # - Extracts to %USERPROFILE%\Downloads\Bot
      # - Patches known FewFeed hardcoded runner paths to portable ones
      # - Runs start-bots.bat (which uses the portable config we set up)
      # >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      - name: üì¶ Prepare and Launch Bots
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          $userHome = [Environment]::GetFolderPath('UserProfile')
          $downloads = Join-Path $userHome 'Downloads'
          $botDir   = Join-Path $downloads 'Bot'
          $tmp      = Join-Path $env:TEMP ('botdl_' + [guid]::NewGuid())
          New-Item -ItemType Directory -Force -Path $tmp | Out-Null
          New-Item -ItemType Directory -Force -Path $downloads | Out-Null
          New-Item -ItemType Directory -Force -Path $botDir | Out-Null

          try {
            # 1) Download the Bot zip from Dropbox
            $zipPath = Join-Path $tmp 'bot.zip'
            Write-Host "‚¨áÔ∏è Downloading Bot.zip from $env:BOT_ZIP_URL ..."
            Invoke-WebRequest -Uri $env:BOT_ZIP_URL -OutFile $zipPath -UseBasicParsing

            # 2) Extract to a temp folder, then move into Downloads\Bot
            $extract = Join-Path $tmp 'unzipped'
            Expand-Archive -Path $zipPath -DestinationPath $extract -Force

            # Support zips that contain 'Bot/' or 'bot/' or direct contents
            $candidates = @(
              (Join-Path $extract 'Bot'),
              (Join-Path $extract 'bot')
            ) | Where-Object { Test-Path $_ }

            if ($candidates.Count -gt 0) {
              $root = $candidates[0]
              Write-Host "üìÅ Found root folder in archive: $root"
              Copy-Item -Path (Join-Path $root '*') -Destination $botDir -Recurse -Force
            } else {
              Write-Host "‚ÑπÔ∏è No root Bot folder; copying all extracted files into $botDir"
              Copy-Item -Path (Join-Path $extract '*') -Destination $botDir -Recurse -Force
            }

            # 3) Patch known FewFeed hardcoded runner paths -> portable path
            $runnerPath = 'C:/Users/runneradmin/Downloads/bot'
            $portable   = ($downloads.Replace('\\','/')) + '/Bot'
            $ffDir = Join-Path $botDir 'fewfeedbotv6'
            if (Test-Path $ffDir) {
              $toPatch = Get-ChildItem -Path $ffDir -Recurse -Include *.json,*.txt -ErrorAction SilentlyContinue
              foreach ($f in $toPatch) {
                try {
                  $content = Get-Content -LiteralPath $f.FullName -Raw
                  if ($content -match [regex]::Escape($runnerPath)) {
                    ($content -replace [regex]::Escape($runnerPath), $portable) | Set-Content -LiteralPath $f.FullName -Encoding UTF8
                    Write-Host "üîß Patched path in: $($f.FullName)"
                  }
                } catch {
                  Write-Host "‚ö†Ô∏è Skipped patch for $($f.FullName): $($_.Exception.Message)"
                }
              }
            }

            # 4) Launch start-bots.bat
            $bat = Join-Path $botDir 'start-bots.bat'
            if (-not (Test-Path $bat)) { throw "start-bots.bat not found at $bat" }
            Write-Host "‚ñ∂ Launching bots via start-bots.bat ..."
            $psi = New-Object System.Diagnostics.ProcessStartInfo
            $psi.FileName = $bat
            $psi.WorkingDirectory = $botDir
            $psi.UseShellExecute = $true
            $psi.WindowStyle = 'Normal'
            [void][System.Diagnostics.Process]::Start($psi)

          } finally {
            try { Remove-Item -LiteralPath $tmp -Recurse -Force -ErrorAction SilentlyContinue } catch {}
          }

      - name: üí† Final Status
        if: always()
        shell: pwsh
        run: |
          Write-Host "‚úÖ EnigMano Instance $env:INSTANCE_ID completed execution."
          Write-Host "üîã Powered by: SHAHZAIB-YT"
          Write-Host "üèÅ EnigMano deployment executed with tactical precision."
