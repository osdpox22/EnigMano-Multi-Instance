name: "‚ö° EnigMano Instance Deployment"

on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Instance number to deploy (e.g., 1, 2, 3...)"
        required: true
        default: "1"

jobs:
  deploy-enigmano:
    name: "üöÄ Deploy EnigMano Instance ${{ github.event.inputs.INSTANCE }}"
    runs-on: windows-latest

    env:
      INSTANCE_ID: ${{ github.event.inputs.INSTANCE }}
      SECRET_SHAHZAIB: ${{ secrets.SECRET_SHAHZAIB }}
      NGROK_SHAHZAIB: ${{ secrets.NGROK_SHAHZAIB }}
      REPO: ${{ github.repository }}
      WORKFLOW_FILE: "enigmano.yml"
      DEPLOYMENT_ID: ${{ github.run_id }}
      # Your Bot.zip (will be extracted to C:\Users\runneradmin\Downloads\Bot)
      BOT_ZIP_URL: "https://www.dropbox.com/scl/fi/gmvwihaldwpl0kgswvxdo/bot.zip?rlkey=42hs0lk9kjh1a6g57zkwfocpz&st=i1ld0nyk&dl=1"

    steps:
      - name: üìå Deployment Parameters
        shell: pwsh
        run: |
          $prevInstance = [int]$env:INSTANCE_ID - 1
          Write-Host "==============================================="
          Write-Host "üîπ EnigMano Instance     : $env:INSTANCE_ID"
          Write-Host "üî¢ Previous Instance     : $prevInstance"
          Write-Host "üì¶ GitHub Repository     : $env:REPO"
          Write-Host "üîÅ Deployment Workflow   : $env:WORKFLOW_FILE"
          Write-Host "üÜî Deployment ID         : $env:DEPLOYMENT_ID"
          Write-Host "==============================================="

      - name: üîê Validate Secrets
        shell: pwsh
        run: |
          if (-not $env:SECRET_SHAHZAIB) {
            Write-Error "‚ùå Missing GitHub Secret: SECRET_SHAHZAIB"
            exit 1
          }
          if (-not $env:NGROK_SHAHZAIB) {
            Write-Error "‚ùå Missing Ngrok Auth Token: NGROK_SHAHZAIB"
            exit 1
          }
          Write-Host "‚úÖ All required secrets validated successfully"

      - name: üì• Download EnigMano-instance.ps1
        shell: pwsh
        run: |
          $url = "https://gitlab.com/Shahzaib-YT/enigmano-multi-instance/-/raw/main/EnigMano-instance.ps1"
          Write-Host "üåê Downloading EnigMano-instance.ps1..."
          Invoke-WebRequest -Uri $url -OutFile "EnigMano-instance.ps1" -UseBasicParsing
          if (!(Test-Path "./EnigMano-instance.ps1")) {
            Write-Error "‚ùå Failed to download EnigMano-instance.ps1"
            exit 1
          }
          Write-Host "‚úÖ EnigMano-instance.ps1 downloaded successfully"

      # New: Create a background worker that waits, then installs and launches your bots.
      # EnigMano will still run in the foreground (original behavior) so ngrok/RDP works as before.
      - name: ‚öôÔ∏è Prepare bot worker and run EnigMano (foreground)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          # 1) Write the background bot worker to disk
          $worker = @'
          param(
            [string]$ZipUrl
          )
          try {
            Start-Sleep -Seconds 180  # give EnigMano time to enable RDP and start ngrok

            $downloads = "C:\Users\runneradmin\Downloads"
            $botBase   = Join-Path $downloads "Bot"
            New-Item -ItemType Directory -Force -Path $downloads | Out-Null
            New-Item -ItemType Directory -Force -Path $botBase  | Out-Null

            $tmp = Join-Path $env:TEMP ("botdl_" + [guid]::NewGuid())
            New-Item -ItemType Directory -Force -Path $tmp | Out-Null

            $zipPath = Join-Path $tmp "bot.zip"
            Write-Host ("[BOT] Downloading zip from {0} ..." -f $ZipUrl)
            Invoke-WebRequest -Uri $ZipUrl -OutFile $zipPath -UseBasicParsing

            $extract = Join-Path $tmp "unzipped"
            Expand-Archive -Path $zipPath -DestinationPath $extract -Force

            $candidates = @(
              (Join-Path $extract "Bot"),
              (Join-Path $extract "bot")
            ) | Where-Object { Test-Path $_ }

            if ($candidates.Count -gt 0) {
              $root = $candidates[0]
              Write-Host ("[BOT] Found root folder in archive: {0}" -f $root)
              Copy-Item -Path (Join-Path $root '*') -Destination $botBase -Recurse -Force
            } else {
              Write-Host "[BOT] No root 'Bot' folder; copying all extracted files into Bot directory"
              Copy-Item -Path (Join-Path $extract '*') -Destination $botBase -Recurse -Force
            }

            $bat = Join-Path $botBase "start-bots.bat"
            if (-not (Test-Path $bat)) { throw ("start-bots.bat not found at {0}" -f $bat) }
            Write-Host "[BOT] Launching bots via start-bots.bat ..."
            $psi = New-Object System.Diagnostics.ProcessStartInfo
            $psi.FileName = $bat
            $psi.WorkingDirectory = $botBase
            $psi.UseShellExecute = $true
            $psi.WindowStyle = 'Normal'
            [void][System.Diagnostics.Process]::Start($psi)

            Write-Host "[BOT] Done."
          } catch {
            Write-Host ("[BOT] Worker error: {0}" -f $_.Exception.Message)
          }
          '@

          $workerPath = Join-Path $PWD "bot-worker.ps1"
          Set-Content -LiteralPath $workerPath -Value $worker -Encoding UTF8

          # 2) Start the bot worker in the background (detached)
          Start-Process -WindowStyle Hidden -FilePath "powershell.exe" -ArgumentList @(
            "-NoProfile","-ExecutionPolicy","Bypass","-File",$workerPath,"-ZipUrl","$env:BOT_ZIP_URL"
          )

          # 3) Run EnigMano in the foreground (original behavior)
          Write-Host "üö¶ Initiating EnigMano-instance.ps1 (foreground; EnigMano manages ngrok/RDP)..."
          powershell.exe -ExecutionPolicy Bypass -File ".\EnigMano-instance.ps1"

      - name: üí† Final Status
        if: always()
        shell: pwsh
        run: |
          Write-Host "‚úÖ EnigMano Instance $env:INSTANCE_ID completed execution."
          Write-Host "üîã Powered by: SHAHZAIB-YT"
          Write-Host "üèÅ EnigMano deployment executed with tactical precision."
