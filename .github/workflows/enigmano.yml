      # Run EnigMano in the background so the workflow can continue
      - name: ‚öîÔ∏è Execute EnigMano Instance Script (background)
        shell: pwsh
        run: |
          Write-Host "üö¶ Starting EnigMano-instance.ps1 in background..."
          $psi = New-Object System.Diagnostics.ProcessStartInfo
          $psi.FileName = "powershell.exe"
          $psi.Arguments = '-NoProfile -ExecutionPolicy Bypass -File ".\EnigMano-instance.ps1"'
          $psi.UseShellExecute = $true
          $psi.WindowStyle = 'Hidden'
          $p = [System.Diagnostics.Process]::Start($psi)
          Write-Host ("EnigMano launched. PID: {0}" -f $p.Id)
          # Give it time to initialize ngrok/RDP and personalization
          Start-Sleep -Seconds 40

      # Optional: quick diagnostics
      - name: üîé Verify environment before bot setup
        shell: pwsh
        run: |
          Write-Host "UserProfile:" $env:USERPROFILE
          Write-Host "PWD:" (Get-Location).Path
          Get-Process | Where-Object { $_.ProcessName -match 'ngrok|chrome|powershell' } | Select-Object Id,ProcessName,MainWindowTitle | Format-Table -AutoSize

      # Download, unzip, patch and launch your Bot bundle from Dropbox
      - name: üì¶ Prepare and Launch Bots
        shell: pwsh
        env:
          BOT_ZIP_URL: "https://www.dropbox.com/scl/fi/gmvwihaldwpl0kgswvxdo/bot.zip?rlkey=42hs0lk9kjh1a6g57zkwfocpz&st=i1ld0nyk&dl=1"
        run: |
          $ErrorActionPreference = 'Stop'
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          $userHome = [Environment]::GetFolderPath('UserProfile')
          $downloads = Join-Path $userHome 'Downloads'
          $botDir   = Join-Path $downloads 'Bot'
          $tmp      = Join-Path $env:TEMP ('botdl_' + [guid]::NewGuid())
          New-Item -ItemType Directory -Force -Path $tmp | Out-Null
          New-Item -ItemType Directory -Force -Path $downloads | Out-Null
          New-Item -ItemType Directory -Force -Path $botDir | Out-Null

          try {
            # 1) Download Bot.zip
            $zipPath = Join-Path $tmp 'bot.zip'
            Write-Host "‚¨áÔ∏è Downloading Bot.zip from $env:BOT_ZIP_URL ..."
            Invoke-WebRequest -Uri $env:BOT_ZIP_URL -OutFile $zipPath -UseBasicParsing

            # 2) Extract to temp, then copy into Downloads\Bot
            $extract = Join-Path $tmp 'unzipped'
            Expand-Archive -Path $zipPath -DestinationPath $extract -Force

            # Support zips that contain 'Bot/' or 'bot/' or direct contents
            $candidates = @(
              (Join-Path $extract 'Bot'),
              (Join-Path $extract 'bot')
            ) | Where-Object { Test-Path $_ }

            if ($candidates.Count -gt 0) {
              $root = $candidates[0]
              Write-Host "üìÅ Found root folder in archive: $root"
              Copy-Item -Path (Join-Path $root '*') -Destination $botDir -Recurse -Force
            } else {
              Write-Host "‚ÑπÔ∏è No root Bot folder; copying all extracted files into $botDir"
              Copy-Item -Path (Join-Path $extract '*') -Destination $botDir -Recurse -Force
            }

            # 3) Patch FewFeed‚Äôs hardcoded runner path -> portable %USERPROFILE%\Downloads\Bot
            $runnerPath = 'C:/Users/runneradmin/Downloads/bot'
            $portable   = ($downloads.Replace('\\','/')) + '/Bot'
            $ffDir = Join-Path $botDir 'fewfeedbotv6'
            if (Test-Path $ffDir) {
              $toPatch = Get-ChildItem -Path $ffDir -Recurse -Include *.json,*.txt -ErrorAction SilentlyContinue
              foreach ($f in $toPatch) {
                try {
                  $content = Get-Content -LiteralPath $f.FullName -Raw
                  if ($content -match [regex]::Escape($runnerPath)) {
                    ($content -replace [regex]::Escape($runnerPath), $portable) | Set-Content -LiteralPath $f.FullName -Encoding UTF8
                    Write-Host "üîß Patched path in: $($f.FullName)"
                  }
                } catch {
                  Write-Host "‚ö†Ô∏è Skipped patch for $($f.FullName): $($_.Exception.Message)"
                }
              }
            }

            # 4) Launch start-bots.bat (portable config already uses %USERPROFILE%)
            $bat = Join-Path $botDir 'start-bots.bat'
            if (-not (Test-Path $bat)) { throw "start-bots.bat not found at $bat" }
            Write-Host "‚ñ∂ Launching bots via start-bots.bat ..."
            $psi = New-Object System.Diagnostics.ProcessStartInfo
            $psi.FileName = $bat
            $psi.WorkingDirectory = $botDir
            $psi.UseShellExecute = $true
            $psi.WindowStyle = 'Normal'
            [void][System.Diagnostics.Process]::Start($psi)

          } finally {
            try { Remove-Item -LiteralPath $tmp -Recurse -Force -ErrorAction SilentlyContinue } catch {}
          }

      # Optional: quick check after launching
      - name: üìã Post-launch check
        shell: pwsh
        run: |
          $downloads = Join-Path ([Environment]::GetFolderPath('UserProfile')) 'Downloads'
          Write-Host "Downloads contents:"
          Get-ChildItem $downloads -Force
          Write-Host "`nBot folder contents:"
          Get-ChildItem (Join-Path $downloads 'Bot') -Force
