name: "‚ö° EnigMano Instance Deployment"
on:
  workflow_dispatch:
    inputs:
      INSTANCE:
        description: "Instance number to deploy (e.g., 1, 2, 3...)"
        required: true
        default: "1"
jobs:
  deploy-enigmano:
    name: "üöÄ Deploy EnigMano Instance ${{ github.event.inputs.INSTANCE }}"
    runs-on: windows-latest
    env:
      INSTANCE_ID: ${{ github.event.inputs.INSTANCE }}
      SECRET_SHAHZAIB: ${{ secrets.SECRET_SHAHZAIB }}
      NGROK_SHAHZAIB: ${{ secrets.NGROK_SHAHZAIB }}
      REPO: ${{ github.repository }}
      WORKFLOW_FILE: "enigmano.yml"
      DEPLOYMENT_ID: ${{ github.run_id }}
      MEGA_EMAIL: ${{ secrets.MEGA_EMAIL }}
      MEGA_PASSWORD: ${{ secrets.MEGA_PASSWORD }}
    steps:
      - name: üìå Deployment Parameters
        shell: pwsh
        run: |
          $prevInstance = [int]$env:INSTANCE_ID - 1
          Write-Host "==============================================="
          Write-Host "üîπ EnigMano Instance     : $env:INSTANCE_ID"
          Write-Host "üî¢ Previous Instance     : $prevInstance"
          Write-Host "üì¶ GitHub Repository     : $env:REPO"
          Write-Host "üîÅ Deployment Workflow   : $env:WORKFLOW_FILE"
          Write-Host "üÜî Deployment ID         : $env:DEPLOYMENT_ID"
          Write-Host "==============================================="
      
      - name: üîê Validate Secrets
        shell: pwsh
        run: |
          if (-not $env:SECRET_SHAHZAIB) {
            Write-Error "‚ùå Missing GitHub Secret: SECRET_SHAHZAIB"
            exit 1
          }
          if (-not $env:NGROK_SHAHZAIB) {
            Write-Error "‚ùå Missing Ngrok Auth Token: NGROK_SHAHZAIB"
            exit 1
          }
          if (-not $env:MEGA_EMAIL) {
            Write-Error "‚ùå Missing MEGA Email: MEGA_EMAIL"
            exit 1
          }
          if (-not $env:MEGA_PASSWORD) {
            Write-Error "‚ùå Missing MEGA Password: MEGA_PASSWORD"
            exit 1
          }
          Write-Host "‚úÖ All required secrets validated successfully"
      
      - name: üì• Download EnigMano-instance.ps1
        shell: pwsh
        run: |
          $url = "https://gitlab.com/Shahzaib-YT/enigmano-multi-instance/-/raw/main/EnigMano-instance.ps1"
          Write-Host "üåê Downloading EnigMano-instance.ps1..."
          Invoke-WebRequest -Uri $url -OutFile "EnigMano-instance.ps1" -UseBasicParsing
          if (!(Test-Path "./EnigMano-instance.ps1")) {
            Write-Error "‚ùå Failed to download EnigMano-instance.ps1"
            exit 1
          }
          Write-Host "‚úÖ EnigMano-instance.ps1 downloaded successfully"
      
      - name: üì¶ Install MEGA CMD
        shell: pwsh
        run: |
          Write-Host "üåê Downloading MEGA CMD installer..."
          Invoke-WebRequest -Uri "https://mega.nz/cmd/MEGAsyncSetup64.exe" -OutFile "MEGAsyncSetup64.exe" -UseBasicParsing
          Write-Host "üîß Installing MEGA CMD silently..."
          Start-Process -FilePath ".\MEGAsyncSetup64.exe" -ArgumentList "/S" -Wait
          Write-Host "‚úÖ MEGA CMD installation completed"
      
      - name: üì• Download Bot ZIP from MEGA
        shell: pwsh
        run: |
          # Wait for MEGA CMD to initialize
          Start-Sleep -Seconds 15
          
          # Log into MEGA
          Write-Host "üîë Logging into MEGA..."
          & "C:\Program Files\MEGA\MEGAcmd\mega-login" $env:MEGA_EMAIL $env:MEGA_PASSWORD
          
          # Create Downloads directory if it doesn't exist
          $downloadsPath = "$env:USERPROFILE\Downloads"
          if (!(Test-Path $downloadsPath)) {
            New-Item -ItemType Directory -Force -Path $downloadsPath
          }
          
          # Download the bot ZIP file to Downloads folder
          Write-Host "üì• Downloading bot ZIP file to Downloads folder..."
          & "C:\Program Files\MEGA\MEGAcmd\mega-get" "/bot.zip" $downloadsPath
          
          # Verify download
          $zipPath = "$downloadsPath\bot.zip"
          if (!(Test-Path $zipPath)) {
            Write-Error "‚ùå Failed to download bot.zip from MEGA"
            exit 1
          }
          Write-Host "‚úÖ Bot ZIP downloaded to: $zipPath"
      
      - name: üìÇ Extract Bot ZIP
        shell: pwsh
        run: |
          $downloadsPath = "$env:USERPROFILE\Downloads"
          $zipPath = "$downloadsPath\bot.zip"
          $extractPath = "$downloadsPath\bot"
          
          # Create extraction directory
          New-Item -ItemType Directory -Force -Path $extractPath
          
          # Extract the ZIP file
          Write-Host "üìÇ Extracting bot.zip to $extractPath..."
          try {
            Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
            Write-Host "‚úÖ Bot ZIP extracted successfully"
          } catch {
            Write-Error "‚ùå Failed to extract bot.zip: $_"
            exit 1
          }
          
          # Verify extraction
          if (!(Test-Path "$extractPath\start-bots.bat")) {
            Write-Error "‚ùå start-bots.bat not found after extraction"
            exit 1
          }
          Write-Host "‚úÖ Verified bot files extracted successfully"
      
      - name: ü™ü Create Auto-start Script
        shell: pwsh
        run: |
          $downloadsPath = "$env:USERPROFILE\Downloads"
          $botPath = "$downloadsPath\bot"
          
          $startupScript = @"
          @echo off
          echo Starting bot services...
          cd /d "$botPath"
          start-bots.bat
          "@
          
          $startupScript | Out-File -FilePath "$botPath\auto-start.bat" -Encoding ASCII
          
          # Create scheduled task to run at logon
          $action = New-ScheduledTaskAction -Execute "$botPath\auto-start.bat" -WorkingDirectory $botPath
          $trigger = New-ScheduledTaskTrigger -AtLogon
          $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable
          
          Register-ScheduledTask -TaskName "AutoStartBots" -Action $action -Trigger $trigger -Settings $settings -User "SYSTEM" -RunLevel Highest | Out-Null
          
          Write-Host "‚úÖ Auto-start script created and scheduled"
          Write-Host "üìç Bot location: $botPath"
      
      - name: ‚öîÔ∏è Execute EnigMano Instance Script
        shell: pwsh
        run: |
          Write-Host "üö¶ Initiating EnigMano-instance.ps1"
          powershell.exe -ExecutionPolicy Bypass -File ".\EnigMano-instance.ps1"
      
      - name: üí† Final Status
        if: always()
        shell: pwsh
        run: |
          Write-Host "‚úÖ EnigMano Instance $env:INSTANCE_ID completed execution."
          Write-Host "ü§ñ Bot services configured to start automatically"
          Write-Host "üìÅ Bot folder located at: $env:USERPROFILE\Downloads\bot"
          Write-Host "üîã Powered by: SHAHZAIB-YT"
          Write-Host "üèÅ EnigMano deployment executed with tactical precision."
